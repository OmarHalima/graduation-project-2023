-- Create a function to handle new team member documentation
CREATE OR REPLACE FUNCTION handle_team_member_join()
RETURNS TRIGGER AS $$
DECLARE
    user_info record;
    member_cv_data jsonb;
BEGIN
    -- Get user information
    SELECT * INTO user_info
    FROM public.users
    WHERE id = NEW.user_id;

    -- Get CV data from team_member_records instead of cv_parsed_data
    SELECT team_member_records.cv_data INTO member_cv_data
    FROM team_member_records
    WHERE team_member_records.user_id = NEW.user_id
    AND team_member_records.project_id = NEW.project_id;

    -- Create a comprehensive document about the new team member
    INSERT INTO project_documents (
        project_id,
        title,
        content,
        category,
        created_by
    ) VALUES (
        NEW.project_id,
        'New Team Member: ' || COALESCE(user_info.full_name, 'User ' || NEW.user_id::text),
        '## Team Member Profile\n\n' ||
        '### Basic Information\n' ||
        '- **Name:** ' || COALESCE(user_info.full_name, 'Not specified') || '\n' ||
        '- **Department:** ' || COALESCE(user_info.department, 'Not specified') || '\n' ||
        '- **Position:** ' || COALESCE(user_info.position, 'Not specified') || '\n' ||
        '- **Role in Project:** ' || COALESCE(NEW.role, 'Member') || '\n' ||
        '- **Join Date:** ' || COALESCE(NEW.joined_at::date::text, NOW()::date::text) || '\n\n' ||
        CASE 
            WHEN member_cv_data IS NOT NULL THEN
                '### Professional Background\n' ||
                '- **Education:** ' || COALESCE(member_cv_data->>'education', 'Not specified') || '\n' ||
                '- **Work Experience:** ' || COALESCE(member_cv_data->>'work_experience', 'Not specified') || '\n' ||
                '- **Skills:** ' || COALESCE(member_cv_data->>'skills', 'Not specified') || '\n' ||
                '- **Languages:** ' || COALESCE(member_cv_data->>'languages', 'Not specified') || '\n' ||
                '- **Certifications:** ' || COALESCE(member_cv_data->>'certifications', 'Not specified') || '\n\n'
            ELSE
                '### Professional Background\n' ||
                '*CV information not available*\n\n'
        END ||
        '*This document was automatically generated by the system.*',
        'team-changes',
        NEW.user_id  -- Use the new member's ID as the creator
    );

    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Drop existing trigger if exists
DROP TRIGGER IF EXISTS team_member_join_trigger ON project_members;

-- Create the trigger
CREATE TRIGGER team_member_join_trigger
    AFTER INSERT ON project_members
    FOR EACH ROW
    EXECUTE FUNCTION handle_team_member_join(); 